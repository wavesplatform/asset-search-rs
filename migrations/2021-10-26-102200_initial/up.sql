CREATE TABLE IF NOT EXISTS blocks_microblocks (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT blocks_microblocks_uid_key UNIQUE,
    id TEXT NOT NULL CONSTRAINT blocks_microblocks_pkey PRIMARY KEY,
    height INTEGER NOT NULL,
    time_stamp BIGINT
);

CREATE INDEX IF NOT EXISTS blocks_microblocks_id_idx ON blocks_microblocks (id);

CREATE INDEX IF NOT EXISTS blocks_microblocks_time_stamp_uid_idx ON blocks_microblocks (time_stamp DESC, uid DESC);

CREATE INDEX blocks_microblocks_height_uid_idx ON blocks_microblocks (height, uid);


CREATE TABLE IF NOT EXISTS assets (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY,
    superseded_by BIGINT DEFAULT 9223372036854775806 NOT NULL,
    block_uid BIGINT NOT NULL CONSTRAINT assets_block_uid_fkey REFERENCES blocks_microblocks (uid) ON DELETE CASCADE,
    id TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    time_stamp TIMESTAMPTZ NOT NULL,
    issuer TEXT NOT NULL,
    precision INTEGER NOT NULL,
    smart BOOLEAN NOT NULL DEFAULT FALSE,
    nft BOOLEAN NOT NULL,
    quantity BIGINT NOT NULL,
    reissuable BOOLEAN NOT NULL,
    min_sponsored_fee BIGINT,
    PRIMARY KEY (superseded_by, id)
);

CREATE INDEX IF NOT EXISTS assets_block_uid_idx ON assets (block_uid);

CREATE INDEX IF NOT EXISTS assets_name_idx ON assets (name);

CREATE INDEX IF NOT EXISTS assets_id_idx ON assets (id);

CREATE INDEX IF NOT EXISTS assets_id_superseded_by_idx ON assets (id, superseded_by);

CREATE INDEX IF NOT EXISTS assets_nft_idx ON assets ((1))
WHERE
    ((nft = false));

CREATE INDEX IF NOT EXISTS assets_id_partial_idx
    ON assets (id)
    WHERE superseded_by = 9223372036854775806;

CREATE INDEX IF NOT EXISTS assets_id_block_uid_idx ON assets (id, block_uid);

CREATE INDEX IF NOT EXISTS assets_issuer_partial_idx
    ON assets (issuer)
    WHERE superseded_by = 9223372036854775806;


CREATE TABLE IF NOT EXISTS asset_metadatas (
    id TEXT NOT NULL,
    name TEXT NOT NULL,
    ticker TEXT,
    block_uid BIGINT NOT NULL,
    PRIMARY KEY (id, name)
);


DROP TYPE IF EXISTS asset_wx_label_value_type;
CREATE TYPE asset_wx_label_value_type AS ENUM (
    'defi',
    'gateway',
    'stablecoin',
    'qualified'
);

CREATE TABLE IF NOT EXISTS asset_wx_labels (
    asset_id TEXT NOT NULL,
    label asset_wx_label_value_type NOT NULL,
    PRIMARY KEY (asset_id, label)
);


DROP TYPE IF EXISTS data_entry_value_type;
CREATE TYPE data_entry_value_type AS ENUM (
    'bool',
    'bin',
    'int',
    'str'
);

CREATE TABLE IF NOT EXISTS data_entries (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY,
    superseded_by BIGINT DEFAULT 9223372036854775806 NOT NULL,
    block_uid BIGINT NOT NULL CONSTRAINT data_entries_block_uid_fkey REFERENCES blocks_microblocks (uid) ON DELETE CASCADE,
    address TEXT NOT NULL,
    key TEXT NOT NULL,
    data_type TEXT,
    bin_val BYTEA,
    bool_val BOOLEAN,
    int_val BIGINT,
    str_val TEXT,
    related_asset_id TEXT,
    PRIMARY KEY (superseded_by, address, key)
);

CREATE INDEX IF NOT EXISTS data_entries_block_uid_idx ON data_entries (block_uid);

CREATE INDEX IF NOT EXISTS data_entries_related_asset_id_partial_idx 
    ON data_entries (related_asset_id) 
    WHERE superseded_by = 9223372036854775806;

CREATE INDEX IF NOT EXISTS data_entries_address_key_partial_idx
    ON data_entries (address, key)
    WHERE superseded_by = 9223372036854775806;


DROP TYPE IF EXISTS verification_status_value_type;
CREATE TYPE verification_status_value_type AS ENUM (
    'declined',
    'unknown',
    'verified'
);

CREATE TABLE IF NOT EXISTS predefined_verifications (
    asset_id TEXT NOT NULL CONSTRAINT predefined_verifications_pkey PRIMARY KEY,
    ticker TEXT DEFAULT NULL,
    verification_status verification_status_value_type DEFAULT 'unknown'
);

CREATE INDEX IF NOT EXISTS predefined_verifications_ticker_idx ON predefined_verifications (ticker);

CREATE INDEX IF NOT EXISTS predefined_verifications_verification_status_idx ON predefined_verifications (verification_status);

CREATE INDEX IF NOT EXISTS predefined_verifications_verification_status_asset_id_idx ON predefined_verifications (verification_status, asset_id);


CREATE TABLE IF NOT EXISTS issuer_balances (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY,
    superseded_by BIGINT DEFAULT 9223372036854775806 NOT NULL,
    block_uid BIGINT NOT NULL CONSTRAINT issuer_balances_uid_fkey REFERENCES blocks_microblocks (uid) ON DELETE CASCADE,
    address TEXT NOT NULL,
    regular_balance BIGINT NOT NULL,
    PRIMARY KEY (superseded_by, address)
);

CREATE INDEX IF NOT EXISTS issuer_balances_block_uid_idx ON issuer_balances (block_uid);

CREATE INDEX IF NOT EXISTS issuer_balances_address_regular_balance_partial_idx
    ON issuer_balances (address, regular_balance)
    WHERE superseded_by = 9223372036854775806;


CREATE TABLE IF NOT EXISTS out_leasings (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY,
    superseded_by BIGINT DEFAULT 9223372036854775806 NOT NULL,
    block_uid BIGINT NOT NULL CONSTRAINT out_leasings_uid_fkey REFERENCES blocks_microblocks (uid) ON DELETE CASCADE,
    address TEXT NOT NULL,
    amount BIGINT NOT NULL,
    PRIMARY KEY (superseded_by, address)
);

CREATE INDEX IF NOT EXISTS out_leasings_block_uid_idx ON out_leasings (block_uid);

CREATE INDEX IF NOT EXISTS out_leasings_address_amount_partial_idx
    ON out_leasings (address, amount)
    WHERE superseded_by = 9223372036854775806;


CREATE OR REPLACE FUNCTION reopen_assets() RETURNS VOID 
    language plpgsql 
AS $$
BEGIN
    UPDATE
        assets
    SET
        superseded_by = 9223372036854775806
    WHERE
        uid IN (
            SELECT
                a1.uid
            FROM
                assets a1
                LEFT JOIN assets a2 ON a1.superseded_by = a2.uid
            WHERE
                a1.superseded_by != 9223372036854775806
                AND a2.uid IS NULL
        );
END;
$$;

CREATE OR REPLACE FUNCTION reopen_data_entries() RETURNS VOID 
    language plpgsql 
AS $$
BEGIN
    UPDATE
        data_entries
    SET
        superseded_by = 9223372036854775806
    WHERE
    uid IN (
        SELECT
            de1.uid
        FROM
            data_entries de1
            LEFT JOIN data_entries de2 ON de1.superseded_by = de2.uid
        WHERE
            de1.superseded_by != 9223372036854775806
            AND de2.uid IS NULL
    );
END;
$$;

CREATE OR REPLACE FUNCTION reopen_issuer_balances() RETURNS VOID 
    language plpgsql 
AS $$
BEGIN
    UPDATE
        issuer_balances
    SET
        superseded_by = 9223372036854775806
    WHERE
    uid IN (
        SELECT
            sb1.uid
        FROM
            issuer_balances sb1
            LEFT JOIN issuer_balances sb2 ON sb1.superseded_by = sb2.uid
        WHERE
            sb1.superseded_by != 9223372036854775806
            AND sb2.uid IS NULL
    );
END;
$$;

CREATE OR REPLACE FUNCTION reopen_out_leasings() RETURNS VOID 
    language plpgsql 
AS $$
BEGIN
    UPDATE
        out_leasings
    SET
        superseded_by = 9223372036854775806
    WHERE
    uid IN (
        SELECT
            ol1.uid
        FROM
            out_leasings ol1
            LEFT JOIN out_leasings ol2 ON ol1.superseded_by = ol2.uid
        WHERE
            ol1.superseded_by != 9223372036854775806
            AND ol2.uid IS NULL
    );
END;
$$;

CREATE OR REPLACE FUNCTION rollback_to(target_height INTEGER) RETURNS VOID 
    language plpgsql 
AS $$ 
BEGIN
    DELETE FROM blocks_microblocks WHERE height >= target_height;

    EXECUTE reopen_assets();
    EXECUTE reopen_data_entries();
    EXECUTE reopen_issuer_balances();
    EXECUTE reopen_out_leasings();
END;
$$;

CREATE OR REPLACE FUNCTION truncate_handler() RETURNS TRIGGER
    language plpgsql
AS $$
BEGIN
    -- for WAVES initial state
    INSERT INTO blocks_microblocks (uid, id, height, time_stamp)
        VALUES (DEFAULT, '', 0, 1460408400000) ON CONFLICT DO NOTHING;


    INSERT INTO assets (uid, superseded_by, block_uid, id, name, description, time_stamp, issuer, precision, smart, nft, quantity, reissuable, min_sponsored_fee)
        VALUES (DEFAULT, DEFAULT, 1, 'WAVES', 'Waves', '', '2016-04-11T21:00:00.000Z', '', 8, false, false, 10000000000000000, false, NULL) ON CONFLICT DO NOTHING;

    RETURN NULL;
END;
$$;

CREATE TRIGGER truncate_handler_trigger
    AFTER TRUNCATE ON blocks_microblocks
    EXECUTE PROCEDURE truncate_handler();

-- call trigger
TRUNCATE blocks_microblocks RESTART IDENTITY CASCADE;
